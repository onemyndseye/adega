#!/bin/bash
#########################################################################################
##          FILE:  adega
##       VERSION:  0.8-rc5
##
##   DESCRIPTION:  Derrived from the Portugese word for wine estate or wine cellar,
##                 Adega is a simple program to help with the task of managing and
##                 configuring your wine prefixes doing so completely independant
##                 of your systems default wine install and prefix.
##
##  REQUIREMENTS:  curl, icoutils, imagemagick, wget
##     MAYBE ALSO: ia32-libs lib32asound2 libc6-i386 lib32nss-mdns binfmt-support
##                 winbind ttf-symbol-replacement, ttf-mscorefonts-installer
##
##        AUTHOR:  Justin Whittington (onemyndseye@yahoo.com)
##         NOTES:  No Oracle, it DOES NOT depend on wine :P
##
##       LICENSE: This program is free software; you can redistribute it and/or modify
##                it under the terms of the GNU General Public License as published by
##                the Free Software Foundation; either version 2 of the License, or
##                (at your option) any later version.
##
##                This program is distributed in the hope that it will be useful,
##                but WITHOUT ANY WARRANTY; without even the implied warranty of
##                MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##                GNU General Public License for more details.
##
##                You should have received a copy of the GNU General Public License
##                along with this program; if not, write to the Free Software
##                Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
##                MA 02110-1301, USA.
##
#########################################################################################

##################################### Variables and Settings #######################################
#
##### Settings - DO NOT delete or change this line +++######
# Default location for the wine-cellar
CELLAR=$HOME/wine-cellar

# Precompiled versions of wine are obtained from this source.  Thanks to the
# PlayOnLinux guys.  Will probably mirror this eventually
WINE_REPO="http://mulx.playonlinux.com/wine/linux-i386"

# Age in days before winetricks and wisotool are checked for an update
WINETRICKS_AGE=7

# Age in days before adega is checked for an update.
ADEGA_AGE=7

# Override for dialog app.  Valid apps are zenity and kdialog
#DIALOG_OVERRIDE=zenity
################# Any of these settings can be overridden in adega-prefix.cfg ########################
######################################################################################################
# Default DLL overrides.  We dont want wine molesting our
# menus
WINEDLLOVERRIDES=winemenubuilder.exe=d

# Filter out Lnks/exe's that match these patterns.
IGNORE_WORDS="application data|iexplore|temp|installshield|safe mode|uninstall|"
IGNORE_URLS="http:|file:|"
IGNORE_EXTS=".url|.htm|.html|.pdf|.txt|.doc"


# By default we only want to show LNKs. Uncomment the other
# to make default.  If no programs are found by scanning by the
# configured settings a full search is performed.
SHOW_LNKS=1
#SHOW_EXES=1

# Rebuild installed program list every time the menu is shown.  Slower
# but more accurate. Comment to turn off
AUTO_REBUILD_PROGRAMS=1

##### END Settings - DO NOT delete or change this line +++######
#
########################################################################################################
#######################################  END Settings ##################################################


############################################# Functions ################################################
do_help() {
ADEGA=$(basename $0)
cat <<HELP_EOF
Adega :: Derrived from the Portugese word for wine estate or wine cellar, Adega is
         a simple program to help with the task of managing and configuring your wine
         prefixes doing so completely independant of your systems default wine install
         and prefix.

Usage: $ADEGA   <options>
        --cellar  <Path>            :: Specify a cellar other than the default
                                       ($CELLAR)

        --prefix  <Prefix>          :: Select a prefix by its short name (basename)

        --run     <Win32 EXE/LNK>   :: Select a EXE or LNK file to run in the specified
                                       prefix.  This option must be last and must be
                                       preceeded by the --prefix switch.

        --env     <Command (args)>  :: Allows running any command inside a given wine
                                       enviroment.  This option must be last and must
                                       be proceeded by the --prefix switch.  This option
                                       automattically sets up the all of the relevant
                                       wine enviroment variables including WINEPREFIX
                                       WINEDLLPATH, WINELOADER, WINEVERSION, WINEVERPATH
                                       before executing the given command.

        --reset                     :: Reset the user prefs stored in ~/.adega/adega.cfg

        --update                    :: Check for an adega update.

        --help                      :: This message.

        --help-all                  :: This message plus helpful examples.

HELP_EOF

[ -z "$EXAMPLES" ] && exit 0
cat <<EXAMPLES_EOF
Examples: $ADEGA
          Run in GUI Mode

          $ADEGA --prefix myapp
          Run in GUI mode with the prefix "myapp" preselected

          $ADEGA --prefix myapp --run
          GUI mode with "myapp" preselected and show installed
          programs.

          $ADEGA --prefix myapp --run ~/downloads/newapp.exe
          Launch newapp.exe inside the "myapp" prefix

          $ADEGA --prefix myapp --env ~/scripts/winetricks
          Run the winetricks script given inside "myapp"

          $ADEGA --prefix myapp --env wine regedit
          Run regedit inside the prefix "myapp"

EXAMPLES_EOF
exit 0
}

############################################ Base level functions ##########################################################
do_dialog() {
## Function to detect the presence of zenity/kdialog and translate
## between the two
##

# Decide which dialog app to use
KDIALOG=$(which kdialog)
ZENITY=$(which zenity)
WINMANAGE=$(basename $(readlink /etc/alternatives/x-window-manager))

if [ -n "$DIALOG_OVERRIDE" ]; then
  # If a dialog method is set in the script header
  # use that one.
  DIALOG_MODE=$DIALOG_OVERRIDE
  DIALOG=$(which $DIALOG_OVERRIDE)
  if [ -z "$DIALOG" ]; then
    echo "A dialog override is present but I was unable to detect it"
    echo "in your path.  Please check your installation for the existance"
    echo "of a supported dialog program in your path (zenity/kdialog)"
    exit 101
  fi
else
  if [ -n "$KDIALOG" -a "$WINMANAGE" = "kwin" ]; then
    DIALOG_MODE=kdialog
  else
    if [ -n "$ZENITY" ]; then
      DIALOG_MODE=zenity
    else
      echo "Unable to detect a dialog method. This script requires either"
      echo "zenity or kdialog to be installed"
      exit 100
    fi
  fi
fi

case "$1" in
       msg)
          # msgbox/info
          shift 1
          if [ "$DIALOG_MODE" = "zenity" ]; then
            zenity --info --title="$1" --text="$2"
            return $?
          else
            kdialog --name "Adega" --title "$1" --msgbox "$2" 2>/dev/null
            return $?
          fi
          ;;

      error)
          # error box
          shift 1
          if [ "$DIALOG_MODE" = "zenity" ]; then
            zenity --error --title="$1" --text="$2"
            return $?
          else
            kdialog --name "Adega" --title "$1" --error "$2" 2>/dev/null
            return $?
          fi
          ;;

      input)
           # Text input
          shift 1
          if [ "$DIALOG_MODE" = "zenity" ]; then
            zenity --title="$1" --entry --text="$2" --entry-text="$3"
            return $?
          else
            kdialog --name "Adega" --title "$1" --inputbox "$2" "$3" 2>/dev/null
            return $?
          fi
          ;;

        ask)
           # Question
          shift 1
          if [ "$DIALOG_MODE" = "zenity" ]; then
            zenity --title="$1" --question --text="$2"
            return $?
          else
            kdialog --name "Adega" --title "$1" --yesno "$2" 2>/dev/null
            return $?
          fi
          ;;

       menu)
           # Menu/List
          shift 1
          HGT="$1"
          WTH="$2"
          TITLE="$3"
          MSG="$4"
          shift 4
          ITEM_STRING="${@}"
          unset items
          num=0
          IFS=";"
          for i in $ITEM_STRING; do
               num=$[ $num + 1 ]
               items+=("$num")
               items+=("$i")
           done
          if [ "$DIALOG_MODE" = "zenity" ]; then
             (zenity --list --width=$HGT --height=$WTH --title="$TITLE" --text="$MSG" --list \
             --column=" " --column=" " --hide-column=1 "${items[@]}") && STAT=0 || STAT=1
             unset items
             return $STAT
          else
            kdialog --name "Adega" --title "$TITLE" --geometry ${HGT}x${WTH}+200+200 --menu "$MSG" "${items[@]}" 2>/dev/null && STAT=0 || STAT=1
            unset items
            return $STAT
          fi
          ;;

      checks)
            # Check list
          shift 1
          if [ "$DIALOG_MODE" = "zenity" ]; then
            ITEM_STRING="$5"
            unset items
            num=0
            IFS=";"
            for i in $ITEM_STRING; do
               num=$[ $num + 1 ]
               items+=("FALSE")
               items+=("$num")
               items+=("$i")
            done
            ARGS="--column=1 --column=2 --column=3 --hide-column=2 --hide-header"
            (zenity --title="$1" --width=$2 --height=$3 --list --checklist --separator=" "  \
             --column=1 --column=2 --column=3 --hide-column=2 --hide-header --text="$4" "${items[@]}")
            unset items
            return $?
          else
            ITEM_STRING="$5"
            unset items
            num=0
            IFS=";"
            for i in $ITEM_STRING; do
               num=$[ $num + 1 ]
               items+=("$num")
               items+=("$i")
               items+=("off")
            done
            echo $(kdialog --name "Adega" --title "$1" $KSIZE --geometry ${2}x${3}+200+200 \
            --checklist "$4" "${items[@]}" 2>/dev/null) | sed s/\"//g
            unset items
            return $?
          fi
          ;;

      slider)
            # Scale/Slider
          shift 1
          if [ "$DIALOG_MODE" = "zenity" ]; then
            ARGS="--min-value=$3 --max-value=$4 --step=$5"
            zenity --scale --title="$1" --text="$2" $ARGS
            return $?
          else
            kdialog --name "Adega" --title "$1" --slider "$2" $3 $4 $5 2>/dev/null
            return $?
          fi
          ;;

     fselect)
            # File section
          shift 1
          if [ "$DIALOG_MODE" = "zenity" ]; then
            zenity --file-selection
            return $?
          else
            kdialog --getopenfilename . 2>/dev/null
            return $?
          fi
          ;;
     progress)
          # Massively retarded universal progress dialog
          # Usage: do_dialog progress <TITLE> <TEXT> <Complete #> <Run CMD> <Status CMD> (<Update freq>)
          # Note:  Make sure <Status CMD> is simple and LIGHT
          shift 1
          TITLE="$1"
          TEXT="$2"
          COMPL_TOTAL="$3"
          EXEC_CMD="${4}"
          COMPL_CMD="${5}"
          PERCT=0
          [ -z "$SLEEP" ] && SLEEP=0
          eval "$EXEC_CMD"  & WAIT_PID=$!
          ( ## Forked subshell ##
              if [ "$DIALOG_MODE" = "zenity" ]; then
                ARGS="--auto-kill --auto-close"
                # Child Process for zenity
                ( (
                 while [ -d /proc/${WAIT_PID} ]; do
                   COMPL_RESULT="$(eval ${COMPL_CMD} 2>/dev/null)"
                   # Ensure we only get numbers
                   COMPL=$(echo $COMPL_RESULT 2>/dev/null | sed "s/[^0-9]//g")
                   [ -z "$COMPL" ] && COMPL=0
                   PERCT=$[ $COMPL * 100 / $COMPL_TOTAL ]
                   echo "$PERCT"
                   sleep $SLEEP
                 done
                 echo 100
                ) | zenity --progress --auto-kill --title="$TITLE" --text="$TEXT" $ARGS ) & ZEN=$!
                wait $ZEN && ZEN_ERR=0 || ZEN_ERR=1
                [ $ZEN_ERR = 1 ] && kill -9 $WAIT_PID
                return $ZEN_ERR
              else
                dbusRef=$(kdialog --progressbar "$TEXT" 100)
                (
                while [ -d /proc/${WAIT_PID} ]; do
                   COMPL_RESULT="$(eval ${COMPL_CMD} 2>/dev/null)"
                   # Ensure we only get numbers
                   COMPL=$(echo $COMPL_RESULT | sed "s/[^0-9]//g")
                   [ -z "$COMPL" ] && COMPL=0
                   PERCT=$[ $COMPL * 100 / $COMPL_TOTAL ]
                   # check if dbus object exists
                   qdbus $dbusRef 1>/dev/null 2>&1
                   if [ "$?" -ne "0" ]; then
                     # dbus Object does not exist (anymore)
                     PERCT=ABORT
                     break
                   fi
                   qdbus $dbusRef Set ""  "value" $PERCT 2>&1 >/dev/null
                   sleep $SLEEP
                done
                qdbus $dbusRef close
                if [ "$PERCT" = "ABORT" ]; then
                  [ -d /proc/${WAIT_PID} ] && kill -9 $WAIT_PID
                  KIA_ERR=1
                else
                  KDIA_ERR=0
                fi
                return $KDIA_ERR
                )
              fi
          ) &
          DIALOG_PID=$!
          wait $WAIT_PID && WAIT_ERR=0 || WAIT_ERR=1
          wait $DIALOG_PID && DIALOG_ERROR=0 || DIALOG_ERROR=1
          [ $DIALOG_ERROR != 0 ] && return $DIALOG_ERROR
          [ $WAIT_ERR != 0 ] && return $WAIT_ERR
          return 0
          ;;
esac
}

do_cleanup() {
rm -rfd "$ADEGA_TEMP"
rm -rfd ~/.adega/temp/
}

adega_updater() {
PID="$1"
URL="http://github.com/onemyndseye/adega/raw/master/adega"

if [ -f $ADEGA_SCRIPT ]; then
  # Check the age
  CHK="$(find $ADEGA_SCRIPT -mtime +${ADEGA_AGE})"
  [ -n "$UPDATE_NOW" ] && CHK=1
  if [ -n "$CHK" ]; then
    # Age limit reached - check for update
    curl -L -s -f "$URL"  >/dev/null && URL_ERROR="" || URL_ERROR=1
    if [ -z "$URL_ERROR" ]; then
      # More more check for valid script
      SCRIPT_CHK="$(curl -L -s -f "$URL" |grep -F "#!/bin/bash")"
      [ -z "$SCRIPT_CHK" ] && return 1
      REMOTE_MD5="$(curl -L -s "$URL" |md5sum |awk '{print $1}')"
      LOCAL_MD5="$(cat $ADEGA_SCRIPT |md5sum |awk '{print $1}')"
      if [ "$REMOTE_MD5" != "$LOCAL_MD5" ]; then
        # An update is available
        MSG="An updated version of adega is available. Would you like to update the local copy?"
        do_dialog ask "Adega: adega updater" "$MSG" && DO_UPDATE=1 || DO_UPDATE=""
        if [ -n "$DO_UPDATE" ]; then
          # Proceed with update
          cp $ADEGA_SCRIPT ${ADEGA_SCRIPT}-backup
          curl -s -L $URL >$ADEGA_SCRIPT
          chmod +x $ADEGA_SCRIPT
          ( sleep 1 ; $ADEGA_SCRIPT ) &
          exit 0
        else
          # Skip the update this time.  Ask again in $ADEGA_AGE
          touch $ADEGA_SCRIPT
        fi
      fi
    fi
  fi
fi
}

wine_env() {
[ -f $PREFIX/adega-prefix.cfg ] && . $PREFIX/adega-prefix.cfg

# If Wineversion isnt set make a last ditch effort to detect
# the latest installed version and continue
if [ -z "$WINEVERSION" ]; then
  cd $CELLAR/WineVersions/
  COUNT="$(ls -p -1 |grep "/" |sed '{s|/||g}' |sort -r | wc -l)"
  if [ $COUNT = 0 ]; then
    # No wineversions installed.  Call the installer
    wine_install
    WINEVERSION="$(ls -p -1 |grep "/" |sed '{s|/||g}' |sort -r |head -n1)"
  else
    # Choose the latest
    WINEVERSION="$(ls -p -1 |grep "/" |sed '{s|/||g}' |sort -r |head -n1)"
  fi
fi

WINEVERPATH="$CELLAR/WineVersions/$WINEVERSION"
WINESERVER="$WINEVERPATH/usr/bin/wineserver"
WINELOADER="$WINEVERPATH/usr/bin/wine"
WINEDLLPATH="$WINEVERPATH/usr/lib/wine"
LD_LIBRARY_PATH="$WINEVERPATH/usr/lib/wine/:$LD_LIBRARY_PATH"
WINE_BIN="$WINEVERPATH/usr/bin/wine"
PATH=$WINEVERPATH/usr/bin:$PATH
}
############################################## END Base level functions #####################################

############################################# Various Helper functions ######################################
make_icon() {
## This ripped pretty much straight from gnome-exe-thumbnailer
TEMPFILE1=$(mktemp -p $ADEGA_TEMP)
TEMPFILE2=$(mktemp -p $ADEGA_TEMP)
TEMPTHUMB=$(mktemp -p $ADEGA_TEMP)
FILE="$1"

if wrestool --extract --type=group_icon "$FILE" > $TEMPFILE1 && [ -s $TEMPFILE1 ]
then
	read INDEX OFFSET < <(
		icotool --list $TEMPFILE1 | awk '{
			ci=int(substr($2,index($2,"=") + 1));
			cw=int(substr($3,index($3,"=") + 1));
			cb=int(substr($5,index($5,"=") + 1));

			if ((cw > w && cw <= 32) || (cw == w && cb > b)) {
				b = cb;
				w = cw;
				i = ci;
			}
		}
		END {
			print i, 16 + (32 - w) / 2;
		}'
	)

	icotool --extract --index=$INDEX $TEMPFILE1 -o $TEMPFILE2
        cp $TEMPFILE2 $TEMPTHUMB
else
        ## Was unable to create an icon.  User must select one
        cd ~
        TEXT="Could not create a png to use as an icon. Please select one manually."
        do_dialog "Adega: icon creator" "$TEXT"
        rm $TEMPTHUMB
        TEMPTHUMB="$(do_dialog fselect)"
fi

cp $TEMPTHUMB $2
rm  $TEMPFILE1 $TEMPFILE2 $TEMPTHUMB
}

make_launcher() {
[ -f $PREFIX/adega-prefix.cfg ] && . $PREFIX/adega-prefix.cfg

## Will need a wine env
wine_env

program_chooser

# $RUNLNK and $LNK_NAME should now be set
EXE="$(WINEPREFIX=$PREFIX winepath -u "$RUNLNK")"
NAME="$(do_dialog "Adega" "Enter a name for this launcher." "$LNK_NAME")"
DESC="$(do_dialog "Adega" "Enter a discription for this launcher" "$LNK_NAME")"
PROGRAM_ARGS="$(do_dialog "Adega" "Enter any needed command line options")"
TITLE="Adega: Make Launcher"
TXT1="Select the propper category for this launcher. This affects were your launcher appears in your menus."
TXT2="Multiples may be selected but take care to only select as many as needed."
MSG="${TXT1} \n ${TXT2}"
LST1="Application AudioVideo Development Emulator Game"
LST2="Graphics Network Office System Utility"
LIST="$LST1 $LST2"
CATES="$(do_dialog "$TITLE" 300 200 "$MSG" "$LIST")"

mkdir -p ~/.local/share/icons/adega/
mkdir -p ~/.local/share/applications/

TMP1="$(echo $NAME | sed '{s/ /_/g}')"
FILE_NAME="adega-$(basename $PREFIX)-${TMP1}"

ICON="$HOME/.local/share/icons/adega/${FILE_NAME}.png"
make_icon "$EXE" "$ICON"

## Set Launcher File name
LAUNCHER="$HOME/.local/share/applications/${FILE_NAME}.desktop"


## Write the Desktop Entry
cat <<NEWLAUNCHER_EOF >"$LAUNCHER"
[Desktop Entry]
Name=$NAME
GenericName=$DESC
Exec=adega --prefix "$(basename $PREFIX)" --run "$EXE" $PROGRAM_ARGS
Terminal=false
Type=Application
Icon=$ICON
Categories=$CATES
StartupNotify=true
NEWLAUNCHER_EOF
}

wine_set_vidmem() {
[ -f $PREFIX/adega-prefix.cfg ] && . $PREFIX/adega-prefix.cfg

## Setup WINE enviroment
wine_env

# Fill autodetected settings
VGA_PCIID="$(lspci |grep VGA |sed -e 's/^\([^ ]* \).*/\1/')"
VGA_MEMORYSIZE="$(lspci -v -s $VGA_PCIID |grep Memory |sed -e 's/.*size=\([0-9]*\).*/\1/' |sort -g |tail -n1)"

# Ask user for value
MSG="Set video memory size in MB"
TITLE="Adega: $(basename $PREFIX) - Video memory"
MEMORYSIZE=$(do_dialog "$TITLE" "$MSG" 16 2048 8)

REGFILE="$PREFIX/drive_c/tmpreg.reg"
cat <<REG_EOF >$REGFILE
[HKEY_CURRENT_USER\Software\Wine\Direct3D] 1209735725
"VideoMemorySize"="@@VIDEO_MEMORY@@"
REG_EOF

sed -i -e "s/@@VIDEO_MEMORY@@/$MEMORYSIZE/" $REGFILE
WINEPREFIX=$PREFIX WINEDLLOVERRIDES=$WINEDLLOVERRIDES "$WINE_BIN" "C:\Windows\regedit.exe" $REGFILE
rm -f $REGFILE
return 0
}
############################################# Various Helper functions ####################################################

############################################## EXEC functions #############################################################
exec_wine() {
[ -f $PREFIX/adega-prefix.cfg ] && . $PREFIX/adega-prefix.cfg

EXE="$1"

OLD_VIDMODE="$(xrandr |grep "Screen 0" | awk '{print $8 $9 $10}' |sed '{s|,||}')"
wine_env
OUTPUT_VERSION="$(WINEPREFIX=$PREFIX "$WINE_BIN" --version)"
echo "Wine version: $OUTPUT_VERSION"

WINEPREFIX=$PREFIX WINEDLLOVERRIDES=$WINEDLLOVERRIDES "$WINE_BIN" start "$EXE" $PROGRAM_ARGS

EXT=${EXE##*.}
if [ "$EXT" = "lnk" ]; then
  PROG="$(strings "$(WINEPREFIX=$PREFIX winepath -u "$EXE")" | grep -m1 '[A-Z]:\\.')"
else
  PROG="$EXE"
fi

if [ -n "$PROG" ]; then
  EXIT=0
  while [ $EXIT = "0" ]
  do
      TMP1=$(ps ax |grep -F "$PROG" |grep -v grep |awk '{print $1}')
      if [ -z "$TMP1" ]; then
        EXIT=1
      fi
      sleep 0.5
  done
fi
# Make sure the original desktop resolution gets restored
xrandr -s "$OLD_VIDMODE"
exit 0
}

exec_winecfg() {
[ -f $PREFIX/adega-prefix.cfg ] && . $PREFIX/adega-prefix.cfg

wine_env
WINEPREFIX=$PREFIX WINEDLLOVERRIDES=$WINEDLLOVERRIDES winecfg
}

exec_winetricks() {
if [ -f ~/.adega/winetricks.sh ]; then
  # Check the age
  CHK="$(find ~/.adega/winetricks.sh -mtime +${WINETRICKS_AGE})"
  if [ -n "$CHK" ]; then
    # Age limit reached - check for update
    curl -s -f http://winezeug.googlecode.com/svn/trunk/winetricks >/dev/null && URL_ERROR="" || URL_ERROR=1
    if [ -z "$URL_ERROR" ]; then
      REMOTE_MD5="$(curl -s http://winezeug.googlecode.com/svn/trunk/winetricks |md5sum |awk '{print $1}')"
      LOCAL_MD5="$(cat ~/.adega/winetricks.sh |md5sum |awk '{print $1}')"
      if [ "$REMOTE_MD5" != "$LOCAL_MD5" ]; then
        # An update is available
        MSG="An updated version of winetricks is available. Would you like to update the local copy?"
        do_dialog ask "Adega: winetricks updater" "$MSG" && DO_UPDATE=1 || DO_UPDATE=""
        if [ -n "$DO_UPDATE" ]; then
          # Proceed with update
          rm -f ~/.adega/winetricks.sh
          curl -s http://winezeug.googlecode.com/svn/trunk/winetricks >~/.adega/winetricks.sh
          chmod +x ~/.adega/winetricks.sh
        else
          # Skip the update this time.  Ask again in $WINETRICKS_AGE
          touch ~/.adega/winetricks.sh
        fi
      fi
    fi
  fi
else
  # Need to get winetricks
  mkdir -p ~/.adega/
  curl -s http://winezeug.googlecode.com/svn/trunk/winetricks >~/.adega/winetricks.sh
  chmod +x ~/.adega/winetricks.sh
fi

wine_env
WINEPREFIX=$PREFIX WINEDLLOVERRIDES=$WINEDLLOVERRIDES ~/.adega/winetricks.sh
}

exec_wisotool() {
if [ -f ~/.adega/wisotool.sh ]; then
  # Check the age
  CHK="$(find ~/.adega/wisotool.sh -mtime +${WINETRICKS_AGE})"
  if [ -n "$CHK" ]; then
    # Age limit reached - check for update
    curl -s -f http://winezeug.googlecode.com/svn/trunk/wisotool >/dev/null && URL_ERROR="" || URL_ERROR=1
    if [ -z "$URL_ERROR" ]; then
      REMOTE_MD5="$(curl -s http://winezeug.googlecode.com/svn/trunk/wisotool |md5sum |awk '{print $1}')"
      LOCAL_MD5="$(cat ~/.adega/wisotool.sh |md5sum |awk '{print $1}')"
      if [ "$REMOTE_MD5" != "$LOCAL_MD5" ]; then
        # An update is available
        MSG="An updated version of wisotool is available. Would you like to update the local copy?"
        do_dialog ask "Adega: wisotool updater updater" "$MSG" && DO_UPDATE=1 || DO_UPDATE=""
        if [ -n "$DO_UPDATE" ]; then
          # Proceed with update
          rm -f ~/.adega/wisotool.sh
          curl -s http://winezeug.googlecode.com/svn/trunk/wisotool >~/.adega/wisotool.sh
          chmod +x ~/.adega/wisotool.sh
        else
          # Skip the update this time.  Ask again in $WINETRICKS_AGE
          touch ~/.adega/wisotool.sh
        fi
      fi
    fi
  fi
else
  # Need to get wisotool
  mkdir -p ~/.adega/
  curl -s http://winezeug.googlecode.com/svn/trunk/wisotool >~/.adega/wisotool.sh
  chmod +x ~/.adega/wisotool.sh
fi

wine_env
WINEPREFIX=$PREFIX WINEDLLOVERRIDES=$WINEDLLOVERRIDES ~/.adega/wisotool.sh
}
########################################## END EXEC functions #########################################################


get_programs() {
## Function to list Programs in $PREFIX lnks first.

IGNORE_PATTERNS="${IGNORE_WORDS}${IGNORE_URLS}${IGNORE_EXTS}"
if [ -n "$SHOW_LNKS" ]; then
  find $PREFIX -name "*.lnk" |egrep -i -v  "$IGNORE_PATTERNS"
fi
if [ -n "$SHOW_EXES" ]; then
  find $PREFIX -name "*.exe" -not -wholename "$PREFIX/drive_c/windows/*" -not \
                      -wholename "$PREFIX/drive_c/Program Files/Common Files/*" \
                      |egrep -i -v  "$IGNORE_PATTERNS"
fi
}

build_program_list() {
LIST=$PREFIX/adega-programs.list

## Will need a wine env
wine_env

### Build a EXE List
IGNORE_PATTERNS="${IGNORE_WORDS}${IGNORE_URLS}${IGNORE_EXTS}"
TMP_LIST=$(mktemp -p $ADEGA_TEMP)
IFS=$'\n'
for i in $(get_programs); do
   EXT=${i##*.}
   if [ "$EXT" = "lnk" ]; then
     NAME="$(basename "$i" |sed '{s|.lnk||}')"
     EXE="$(strings "$i" | grep -m1 '[A-Z]:\\.')"
     LNK="$(WINEPREFIX=$PREFIX winepath -w "$i")"

     FILTER_CHECK="$(echo $EXE | egrep -i -v  "$IGNORE_PATTERNS")"
     if [ -n "$FILTER_CHECK" ]; then
       echo "$NAME ::: $LNK" >>$TMP_LIST
     fi
   else
     EXE="$(WINEPREFIX=$PREFIX winepath -w "$i")"
     NAME="$(echo $(basename $(WINEPREFIX=$PREFIX winepath -u "$EXE")) |sed '{s|.exe||;s|.EXE||}')"
     ## Check for dupes
     CHK_DUPE="$(cat $TMP_LIST |grep -F "$(basename "$EXE")")"
     if [ -z "$CHK_DUPE" ]; then
       echo "$NAME ::: $EXE" >>$TMP_LIST
     fi
   fi
done
## Format the list
TMP_MENU=$(mktemp -p $ADEGA_TEMP)
cat $TMP_LIST |egrep -i -v  "$IGNORE_PATTERNS" >>$TMP_MENU
chklist="$(cat $TMP_MENU |sed 's/^[ \t]*//;s/[ \t]*$//' | sed '/^$/d' |wc -l)"
if [ $chklist = 0 ]; then
  if [ -z "$RETRY_SEARCH" ]; then
    RETRY_SEARCH=1
    # Didnt get any apps.  Try full search
    SHOW_LNKS=1
    SHOW_EXES=1
    rm -f $TMP_LIST
    rm -f $TMP_MENU
    build_program_list
    return 0
  else
    echo "Was unable to find any programs to run.  Please try running manually."
    exit 1
  fi
fi
cat $TMP_MENU >$LIST
rm -f $TMP_LIST
rm -f $TMP_MENU
}

####################################### Prefix functions ########################################################
prefix_cleaner() {
rm -rfd ${PREFIX}/drive_c/users/onemyndseye/Temp/*
rm -rfd ${PREFIX}/drive_c/windows/temp/*
rm -rfd "${PREFIX}/drive_c/Program Files/InstallShield Installation Information/"
}

prefix_backup() {
NAME="$(basename "$PREFIX")"
MSG1="We will not create a tar/gz backup of the following prefix: \n \n $NAME"
MSG2="\n\nDo you wish to proceed?"
MSG="$MSG1 $MSG2"
do_dialog ask "Adega: $NAME - Prefix backup" "$MSG" && BACKUP=1 || BACKUP=""


if [ -n "$BACKUP" ]; then
  cd "$PREFIX"
  FILE_COUNT="$(find . |wc -l)"

  cd $CELLAR
  PROGRESS=$(mktemp -p $ADEGA_TEMP)
  echo 0 >$PROGRESS

  TITLE="Adega - $NAME Backup"
  MSG="Compressing $NAME ..."
  DATE=$(date +%Y%m%d%H%M%S)
  FILENAME="$HOME/adegaprefix-${NAME}-${DATE}.tar.gz"
  CMD='tar -vpczf "$FILENAME" ./${NAME}/ > $PROGRESS'
  SCMD='cat $PROGRESS | wc -l'
  do_dialog progress "$TITLE" "$MSG" $FILE_COUNT "$CMD" "$SCMD"
  TAR_ERR=$?

  if [ $TAR_ERR = 0 ]; then
    do_dialog msg "$TITLE" "Operation complete! \n\n Saved backup to $FILENAME"
  else
    do_dialog error "$TITLE" "Creating $FILENAME Failed!!"
  fi
fi
}

prefix_create() {
MSG="Enter a directory name for this prefix:"
NAME="$(do_dialog input "Adega: create prefix" "$MSG")"
PREFIX="${CELLAR}/${NAME}"
mkdir -p "$PREFIX"

prefix_options "return"

wine_env
WINEPREFIX=$PREFIX WINEDLLOVERRIDES=$WINEDLLOVERRIDES wineboot --update 2>&1 >/dev/null

MSG="Would you like to see the tools menu now"
do_dialog ask "Adega: create prefix" "$MSG" && TOOLS=1 || TOOLS=""

if [ -n "$TOOLS" ]; then
  winetools_menu "return"
fi
}

prefix_reset() {
[ -f $PREFIX/adega-prefix.cfg ] && . $PREFIX/adega-prefix.cfg

wine_env
WINEPREFIX=$PREFIX wineserver -k
WINEPREFIX=$PREFIX wineboot
}

prefix_run() {
[ -f $PREFIX/adega-prefix.cfg ] && . $PREFIX/adega-prefix.cfg
RUNLNK="$1"

## Set Wine env
wine_env

if [ -z "$RUNLNK" ]; then
  program_chooser
  EXE="$RUNLNK"
else
  EXE="$(WINEPREFIX=$PREFIX winepath -w "$RUNLNK")"
fi

if [ -n "$EXE" ]; then
  EXT=${EXE##*.}
  if [ "$EXT" = "lnk" ]; then
    TARGET_EXE="$(strings "$(WINEPREFIX=$PREFIX winepath -u "$EXE")" | grep -m1 '[A-Z]:\\.')"
    TARGET="$(dirname "$(WINEPREFIX=$PREFIX winepath -u "$TARGET_EXE")")"
  else
    TARGET="$(dirname "$(WINEPREFIX=$PREFIX winepath "$EXE")")"
  fi
  LOG="${PREFIX}/last-session.log"
  cd "${TARGET}"
  echo "Will use the following prefix:  $PREFIX"
  echo "Will log messages to $LOG .."
  echo "Starting $EXE ..."
  [ -n "$TARGET_EXE" ] && echo "Target EXE: $TARGET_EXE ..."
  echo "CWD is: $(pwd) .."
  exec_wine "$EXE" >$LOG 2>&1
else
  echo "An error has occured!! .."
  exit 23
fi
}
###################################### END Prefix functions ########################################################

############################################# Various Choosers ########################################################
wine_exe_chooser() {
cd ~
RUNLNK=$(do_dialog fselect)
}

program_chooser() {
LIST=$PREFIX/adega-programs.list
[ -n "$AUTO_REBUILD_PROGRAMS" ] && build_program_list
[ ! -f "$LIST" ] && build_program_list

TITLE="$(basename $PREFIX) :: Available Windows Programs"
TEXT="Select a program to run"
PROG_LIST=$(cat $LIST | tr '\n' ";")
PROGRAM="$(do_dialog menu 800 600 "$TITLE" "$TEXT" "$PROG_LIST")"
[ -z "$PROGRAM" ] && return 1

# Translate the tag number given by do_dialog
RUNLNK="$(cat $LIST | sed -n "${PROGRAM}p" |sed '{s|::: |::: \n|}' |grep -v ":::")"
LNK_NAME="$(cat $LIST | sed -n "${PROGRAM}p" | sed '{s| :::|\n :::|}'|grep -v ":::")"
}



prefix_chooser() {
MSG="Select a WINE Prefix"
TITLE="Adega"
cd $CELLAR
PREFIX_LIST="$(ls -p -1 |grep "/" |grep -v "WineVersions" |sed '{s|/||g}'  |tr '\n' ";")"
GET_PREFIX="$(do_dialog menu 640 480 "$TITLE" "$MSG" "$PREFIX_LIST")"

# Translate tag number from do_dialog
if [ -n "$GET_PREFIX" ]; then
  CHOICE="$(echo $PREFIX_LIST |sed '{s/;/\n/g}' |sed '/^$/d' |sed -n "${GET_PREFIX}p")"
  if [ -n "$CHOICE" ]; then
    PREFIX=$CELLAR/$CHOICE
    if [ -f $PREFIX/adega-prefix.cfg ]; then
      . $PREFIX/adega-prefix.cfg
    else
      MSG="Afew options need to be set for this prefix"
      do_dialog info "Adega" "$MSG"
      prefix_options "return"
      . $PREFIX/adega-prefix.cfg
    fi
  else
    echo "Must select a valid prefix"
    exit 1
  fi
else
  echo "Must select a prefix"
  exit 1
fi
}

wine_chooser() {
cd $CELLAR/WineVersions
COUNT=$(ls -p -1 |grep "/" |wc -l)
if [ $COUNT = 0 ]; then
    # No wineversions installed.  Call the installer
    wine_install
    wine_chooser
    return 0
else
  TITLE="Adega: $(basename $PREFIX)"
  MSG="Select a WINE Version"
  WINE_LIST="$(ls -p -1 |grep "/" |sed '{s|/||g}' |sort -r  |tr '\n' ";")"
  GET_VERS="$(do_dialog menu 800 600 "$TITLE" "$MSG" "$WINE_LIST")"

  # Translate tag number from do_dialog
  if [ -n "$GET_VERS" ]; then
    CHOICE="$(echo $WINE_LIST |sed '{s/;/\n/g}' |sed '/^$/d' |sed -n "${GET_VERS}p")"
    if [ -n "$CHOICE" ]; then
      WINEVERSION=$CHOICE
    else
      echo "Must select a valid wine version"
      exit 1
    fi
  else
    echo "Must select a wine version"
    exit 1
  fi
fi
}
################################################# END Various Choosers ##############################################

wine_install() {
WINE_TMP="$ADEGA_TEMP/wine-tmp"
mkdir -p "$WINE_TMP"
cd "$WINE_TMP"

VERSIONS=$(curl -s ${WINE_REPO}/LIST | sed -e '{s|;| |g}' |awk '{print $2}' |sort -r)
LIST="$(echo -e $VERSIONS |sed '{s/ /;/g}')"
MSG="Select wine versions to install"
WINE_INSTALL_VERSIONS=$(do_dialog checks "Wine Installer" 800 600 "$MSG" "$LIST")
if [ -n "$WINE_INSTALL_VERSIONS" ]; then
  for i in $WINE_INSTALL_VERSIONS; do
    # Check to make sure its not already installed
    # First have to translate the tag number given by do_dialog into a
    # actual result.
    INSTALL_VERSION=$(echo $VERSIONS | sed '{s/ /\n/g}' |sed -n "${i}p")
    CHK="${CELLAR}/WineVersions/${INSTALL_VERSION}"
    if [ ! -d $CHK ]; then
      # Everything looks ok.  Proceed
      WINE_BOTTLE_FILE="$(curl -s ${WINE_REPO}/LIST | sed -e '{s|;| |; s|;| |}' \
      |grep -m 1 -F "wine-${INSTALL_VERSION}." |awk '{print $1}')"
      WINE_URL="$WINE_REPO/$WINE_BOTTLE_FILE"

      # Download WINE
      WINE_URL="$WINE_REPO/$WINE_BOTTLE_FILE"
      do_download "$WINE_URL" "Downloading WINE $INSTALL_VERSION" "$WINE_TMP"
      if [ "$?" != "0" ]; then
        # WINE download failed.
        do_dialog error "Alert" "Download of  WINE failed! Aborting..."
        exit 300
      fi
      # Extract WINE
      tar -xvf $WINE_BOTTLE_FILE
      if [ "$?" != "0" ]; then
        # WINE extract failed.
        do_dialog error "Alert" "Unpacking of  WINE failed! Aborting..."
        exit 302
      fi
    fi
  done
  mv ${WINE_TMP}/wineversion/* ${CELLAR}/WineVersions/.
  rm -rfd "$WINE_TMP"
  do_dialog msg "Adega: Wine installer" "Operation Complete"
  return 0
else
  do_dialog error "Alert" "No versions of wine selected for installation"
  return 1
fi
}

do_download() {
DOWNLOAD_URL="$1"
TEXT="$2"
DEST="$3"
DL_CDIR=$(pwd)
cd "$DEST"

FILE=$(basename "$DOWNLOAD_URL")
# get file size
TMP=$(curl -sI "$1" | grep Content-Length | sed "s/[^0-9]//g")
SIZE=$[ $TMP /  1024 ]

CMD="wget -q "$DOWNLOAD_URL""
PCMD='du $FILE | cut -f1'
do_dialog progress "Adega" "Downloading $FILE .." $SIZE "$CMD" "$PCMD"
WGET_STAT=$?
rm -f "$CFILE"

cd "$DL_CDIR"
return $WGET_STAT
}

#####################################################  Menu Functions ###############################################
action_menu() {
MENU1="Choose an existing wine prefix;Create and configure a new wine prefix;Remove a wine prefix;"
MENU2="Install a new copy of wine;Browse WINE AppDB;Quit;"
MENU_STRING="${MENU1}${MENU2}"
TITLE="Adega"
MSG="Please choose an operation"
ACTION=$(do_dialog menu 800 600 "$TITLE" "$MSG" "$MENU_STRING")
[ -z "$ACTION" ] && exit 0

case "$ACTION" in
              1)
               prefix_chooser
               main_menu "action_menu"
               ;;
              2)
               prefix_create
               action_menu
               ;;
              3)
               prefix_chooser
               if [ -d "$PREFIX" ]; then
                 MSG="Are you sure you want to remove the following prefix?: \n\n $(basename $PREFIX)"
                 do_dialog ask "Adega: prefix remover" "$MSG" && REMOVE=1 || REMOVE=""
                 if [ -n "$REMOVE" ]; then
                   META_FILES="adega-$(basename $PREFIX)"
                   rm -rfd "$PREFIX"
                   rm -f $HOME/.local/share/applications/${META_FILES}-*
                   rm -f $HOME/.local/share/icons/adega/${META_FILES}-*
                 fi
               fi
               action_menu
               ;;
              4)
               wine_install
               action_menu
               ;;
              5)
               x-www-browser "http://appdb.winehq.org/objectManager.php?sClass=application" &
               action_menu
               ;;
              6)
               exit 0
               ;;

esac
}


main_menu() {
END_CMD="$1"
MSG="Please choose an action for the selected prefix."
MENU_STRING="Run a program;Kill all running programs;Adega Toolbox;Back;"
TITLE="Adega: $(basename $PREFIX)"
COMMAND_MODE=$(do_dialog menu 800 600 "$TITLE" "$MSG" "$MENU_STRING")
[ -z "$COMMAND_MODE" ] && exit 1

case "$COMMAND_MODE" in
             1)
              run_menu "main_menu"
              ;;
             2)
              prefix_reset
              run_menu "$END_CMD"
              ;;
             3)
              winetools_menu "main_menu"
              ;;

             4)
              $END_CMD
              ;;
             *)
              exit 1
              ;;
esac


}

run_menu() {
END_CMD="$1"
MSG="Please choose an operation"
MENU_STRING="Run a installed program;Choose an EXE to run;Back;"
TITLE="Adega: $(basename $PREFIX)"
RUNMODE=$(do_dialog menu 800 600 "$TITLE" "$MSG" "$MENU_STRING")

[ -z "$RUNMODE" ] && RUNMODE=3

case "$RUNMODE" in
                 1)
                   prefix_run
                   ;;
                 2)
                   wine_exe_chooser
                   prefix_run "$RUNLNK"
                   ;;

                 3)
                   $END_CMD
                   ;;
esac
}

winetools_menu() {
END_CMD="$1"
MSG="Please choose a tool"
TITLE="Adega: $(basename $PREFIX)"
MENU1="Set adega prefix options;Rebuild Installed program list;Make a launcher for an installed program;"
MENU2="Remove Temp and Uninstaller files;Backup and compress prefix;Wine Registry;winecfg;"
MENU3="winetricks;wisotool;Back;"
MENU_STRING="${MENU1}${MENU2}${MENU3}${MENU4}"
TOOLSMODE=$(do_dialog menu 800 600 "$TITLE" "$MSG" "$MENU_STRING")

[ -z "$TOOLSMODE" ] && TOOLSMODE=10
case "$TOOLSMODE" in
                 1)
                  prefix_options "winetools_menu"
                  ;;
                 2)
                  build_program_list
                  winetools_menu "$END_CMD"
                  ;;
                 3)
                  make_launcher
                  winetools_menu "$END_CMD"
                  ;;
                 4)
                   prefix_cleaner
                   winetools_menu "$END_CMD"
                  ;;

                 5)
                  prefix_backup
                  winetools_menu "$END_CMD"
                  ;;

                 6)
                  registry_menu "winetools_menu"
                  ;;

                 7)
                  exec_winecfg
                  winetools_menu "$END_CMD"
                  ;;
                 8)
                  exec_winetricks
                  winetools_menu "$END_CMD"
                  ;;
                 9)
                  exec_wisotool
                  winetools_menu "$END_CMD"
                  ;;
                10)
                  [ -z "$END_CMD" ] & END_CMD="main_menu"
                  $END_CMD
                  ;;

esac
}

registry_menu() {
END_CMD="$1"
MSG="Please choose an operation"
TITLE="Adega: $(basename $PREFIX)"
REGTWEAKS=$(do_dialog menu 800 600 "$TITLE" "$MSG" "Set video memory size;Run Regedit;Back;")
[ -z "$REGTWEAKS" ] && REGTWEAKS=3

case "$REGTWEAKS" in
            1)
             wine_set_vidmem
             registry_menu "$END_CMD"
             ;;
            2)
             wine_env
             WINEPREFIX=$PREFIX WINEDLLOVERRIDES=$WINEDLLOVERRIDES "$WINE_BIN" "C:\Windows\regedit.exe" 2>&1 >/dev/null
             winetools_menu "$END_CMD"
             ;;
            3)
             $END_CMD
             ;;
esac
}

prefix_options() {
END_CMD="$1"
WIDTH=800
HGHT=600
TITLE="Adega: $($basename $prefix) options"
MSG="Please set the wine version to use with this prefix"
do_dialog msg "$TITLE" "$MSG"
wine_chooser

MSG="Enter any DLL overrides for wine separted with a comma (Blank for none)"
WINEDLLOVERRIDES="$(do_dialog input "$TITLE" "$MSG" "$WINEDLLOVERRIDES")"

PROGRAM_CHOOSER_OPTIONS="$(do_dialog checks "$TITLE" 400 300 "$MSG" "Show LNK Files;Show EXE Files")"
echo $PROGRAM_CHOOSER_OPTIONS |grep "1" >/dev/null && SHOW_LNKS=1 || SHOW_LNKS=""
echo $PROGRAM_CHOOSER_OPTIONS |grep "2" >/dev/null && SHOW_EXES=1 || SHOW_EXES=""

## Save config
MSG="Would you like to save these options to the following prefix?: \n\n $(basename $PREFIX)"
do_dialog ask "$TITLE" "$MSG" && SAVE=1 || SAVE=""
if [ -n "$SAVE" ]; then
  echo "WINEVERSION=$WINEVERSION" >$PREFIX/adega-prefix.cfg
  echo "WINEDLLOVERRIDES=$WINEDLLOVERRIDES" >>$PREFIX/adega-prefix.cfg
  echo "SHOW_LNKS=$SHOW_LNKS" >>$PREFIX/adega-prefix.cfg
  [ -n "$SHOW_EXES" ] && echo "SHOW_EXES=$SHOW_EXES" >>$PREFIX/adega-prefix.cfg
fi

$END_CMD
}
#########################################  END Menus ###########################################################

######################################## END Functions ##########################################################
#################################################################################################################
################################# Init ###########################################################
## Need to strictly define the location of this script
## and hopfully this will work consistantly.  Trying to mimick PHP realpath()
ADEGA_SCRIPT="$(readlink -f $(type -a "$0" |awk '{print $3}'|head -n1))"

# Define some temp space and trap exits
trap "{ do_cleanup ; exit 0; }" EXIT
mkdir -p $HOME/.adega/temp/
ADEGA_TEMP=$(mktemp -d ~/.adega/temp/tmp.XXXXXXX)

# Check for cmdline reset prefs
if [ "$1" = "--reset" ]; then
  shift 1
  rm -f $HOME/.adega/adega.cfg 2>&1 >/dev/null
fi

# Check for/create user prefs
if [ -f $HOME/.adega/adega.cfg ]; then
  . $HOME/.adega/adega.cfg
else
  # Create defaults from this scripts header.
  echo "Creating user preferences file .."
  START="##### Settings"
  END="##### END Settings"
  AWK_STRING_START="/^$START/ {print NR + 1; exit 0; }"
  AWK_STRING_END="/^$END/ {print NR - 1; exit 0; }"
  DATA_START=$(awk "$AWK_STRING_START" "$ADEGA_SCRIPT")
  DATA_END=$(awk "$AWK_STRING_END" "$ADEGA_SCRIPT")
  SED_STRING=""$DATA_START","$DATA_END"p"
  echo $SED_STRING
  cat "$ADEGA_SCRIPT" | sed -n "$SED_STRING" > $HOME/.adega/adega.cfg
fi

# check for updates
adega_updater
###################################### END Init ##################################################

while [ "$1" ]; do
  case "$1" in
            --cellar|-c)
                    CLI=1
                    CELLAR=$2
                    shift 2
                    ;;
            --prefix|-p)
                    CLI=1
                    if [ -d $CELLAR/$2 ]; then
                      PREFIX=$CELLAR/$2
                    else
                      echo "Invalid prefix"
                      exit 1
                    fi
                    shift 2
                    ;;
            --env|-e)
                    # This option must be last
                    shift 1
                    ENV_CMD="${@}"
                    if [ -n "$PREFIX" ]; then
                      # setup wine
                      wine_env
                      eval WINEPREFIX=$PREFIX "${@}"
                      exit $?
                    else
                      echo "Error: no prefix given"
                      do_help
                      exit 1
                    fi
                    break
                    ;;

            --run|-r)
                    # This option must be last
                    CLI=1
                    RUNMODE=1
                    RUNLNK="$2"
                    if [ -n "$PREFIX" ]; then
                      if [ -n "$RUNLNK" ]; then
                        # Store programs args for later
                        shift 2
                        PROGRAM_ARGS="${@}"
                      fi
                    else
                      echo "Error: no prefix given"
                      do_help
                      exit 1
                    fi
                    break
                    ;;
            --update|-u)
                    CLI=1
                    UPDATE_NOW=1
                    adega_updater
                    exit 0
                    break
                    ;;
            --help)
                    CLI=1
                    do_help
                    exit 0
                    break
                    ;;

            --help-all)
                    CLI=1
                    EXAMPLES=1
                    do_help
                    exit 0
                    break
                    ;;
                   *)
                    if [ -z "$CLI_MODE" ]; then
                      echo "Error: $1 is a invalid option."
                      do_help
                      exit 1
                    fi
                    ;;
  esac
done

if [ -n "$CLI" ]; then
  if [ -z "$RUNLNK" ]; then
   if [ -n "$RUNMODE" ]; then
     prefix_run
   else
     main_menu
   fi
  else
    prefix_run "$RUNLNK"
  fi
else
  action_menu
fi
